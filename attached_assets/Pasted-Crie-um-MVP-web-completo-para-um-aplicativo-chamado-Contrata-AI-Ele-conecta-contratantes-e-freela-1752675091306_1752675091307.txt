Crie um MVP web completo para um aplicativo chamado "Contrata AI". Ele conecta contratantes e freelancers para servi√ßos presenciais e pontuais (ex: bares contratando gar√ßons para eventos).

---

üß± STACK:

- Frontend: Next.js com React (foco em SEO e performance)
- Backend: Node.js com Express
- Banco de dados: PostgreSQL (Neon)
- Autentica√ß√£o: JWT
- Estiliza√ß√£o: TailwindCSS
- Integra√ß√£o simples de plano mensal com l√≥gica de pagamento fict√≠cia (n√£o precisa gateway real no MVP)

---

üîê AUTENTICA√á√ÉO E USU√ÅRIOS:

Dois tipos de usu√°rio:
1. Contratante
2. Freelancer

Campos obrigat√≥rios no cadastro:
- Nome
- E-mail
- Senha (com hash via bcrypt)
- Tipo de usu√°rio
- Cidade

Autentica√ß√£o com JWT no backend, token armazenado no `localStorage`.

---

üß© FUNCIONALIDADES PRINCIPAIS:

üü¶ **Contratante pode:**
- Criar at√© **3 vagas por semana** no plano gratuito
- Criar vagas ilimitadas no plano de R$19,90/m√™s
- Criar vaga com os campos:
  - T√≠tulo
  - Categoria e subcategoria
  - Descri√ß√£o
  - Data e hora
  - Localiza√ß√£o
  - Valor
  - **Destacar vaga (R$4,99 por 7 dias)** ‚Üí campo `destaque = true`
- Visualizar lista de candidatos por vaga
- Selecionar um freelancer entre os candidatos

üü© **Freelancer pode:**
- Explorar vagas filtrando por cidade, categoria e data
- Ver detalhes de cada vaga
- Se candidatar
- Destacar o pr√≥prio perfil (R$2,99 por 7 dias) ‚Üí campo `destaque = true`

---

üí∞ MONETIZA√á√ÉO DO MVP:

- Um plano √∫nico: R$19,90/m√™s
  - Remove limites de cria√ß√£o de vagas (para contratantes)
  - Remove qualquer limita√ß√£o futura de candidaturas

- Pagamentos simulados:
  - `premium = true` no usu√°rio indica plano ativo
  - `vagas_criadas_semana` reseta a cada semana para contas gratuitas

- Destaques pagos por fora:
  - R$4,99 por vaga em destaque
  - R$2,99 por destaque de perfil

(No MVP, os pagamentos s√£o simulados apenas com flags nos dados.)

---

üßæ ESTRUTURA DO BANCO (PostgreSQL):

```sql
CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  email TEXT UNIQUE NOT NULL,
  password TEXT NOT NULL,
  type TEXT CHECK (type IN ('freelancer', 'contratante')),
  city TEXT,
  premium BOOLEAN DEFAULT FALSE,
  destaque BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP DEFAULT now()
);

CREATE TABLE categories (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL
);

CREATE TABLE subcategories (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  category_id UUID REFERENCES categories(id)
);

CREATE TABLE jobs (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  client_id UUID REFERENCES users(id),
  subcategory_id UUID REFERENCES subcategories(id),
  title TEXT,
  description TEXT,
  date DATE,
  time TEXT,
  location TEXT,
  payment NUMERIC,
  destaque BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP DEFAULT now()
);

CREATE TABLE applications (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  job_id UUID REFERENCES jobs(id),
  freelancer_id UUID REFERENCES users(id),
  status TEXT DEFAULT 'pending',
  created_at TIMESTAMP DEFAULT now()
);

CREATE TABLE job_limits (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id),
  week_number INTEGER,
  job_count INTEGER DEFAULT 0
);
üì≤ FRONTEND COM NEXT.JS:

P√°ginas:

/login

/register

/dashboard (din√¢mico conforme tipo de usu√°rio)

/vagas

/vaga/[id] ‚Üí detalhes

/criar-vaga

/candidaturas

/configuracoes

Autentica√ß√£o via contexto

Prote√ß√£o de rotas (middleware para verificar token JWT)

Axios para comunica√ß√£o com o backend

Layout limpo com foco mobile-first


 OUTRAS OBSERVA√á√ïES:

Use a conex√£o Neon PostgreSQL:
psql 'postgresql://neondb_owner:npg_BqzVv5d6KntG@ep-falling-snow-acibggbo-pooler.sa-east-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require'

Crie seed para popular categorias e subcategorias (ex: Eventos ‚Üí Gar√ßom, Cozinheiro, etc.)

Organize o backend em:

routes/

controllers/

models/

middlewares/

utils/